syntax = "proto3";
package spire.plugin.agent.nodeattestor.v1;
option go_package = "github.com/spiffe/spire-plugin-sdk/proto/spire/plugin/agent/nodeattestor/v1;nodeattestorv1";

service NodeAttestor {
    // FetchAttestationData retrieves the attestation payload and optionally
    // participates in challenge/response attestation mechanics.
    //
    // The attestation flow is as follows:
    // 1. SPIRE agent opens up a stream to the plugin via FetchAttestationData.
    // 2. The plugin returns a response with the payload.
    // 3. SPIRE agent sends the payload to SPIRE server.
    // 4. Optionally, SPIRE server responds with a challenge:
    //   4a. SPIRE agent sends the challenge to the plugin.
    //   4b. The plugin responds with the challenge response.
    //   4c. SPIRE agent sends the challenge response to SPIRE server.
    //   4d. Step 4 is repeated until SPIRE server is satisfied and does not
    //       respond with an additional challenge.
    // 5. SPIRE agent closes the stream.
    //
    // Note that SPIRE agent does NOT send a request down the stream unless it
    // needs to issue the challenge returned by SPIRE server (step 4a).
    //
    // Plugins that do not need challenge/response as part of the attestation
    // process may close the stream as soon as they send the attestation
    // payload (step 2).
    rpc FetchAttestationData(stream FetchAttestationDataRequest) returns (stream FetchAttestationDataResponse);
}

message FetchAttestationDataRequest {
    // Required. The challenge issued by the server. See the
    // FetchAttestationData RPC for details.
    bytes challenge = 1;
}

message FetchAttestationDataResponse {
    oneof result {
        // Required in the first response. This is the attestation payload that
        // is to be sent to the server. See the FetchAttestationData RPC for
        // details.
        bytes payload = 1;

        // Required in subsequent responses. The challenge response to a
        // challenge issued by the server. See the FetchAttestationData RPC
        // for details.
        bytes challenge_response = 2;
    }
}


